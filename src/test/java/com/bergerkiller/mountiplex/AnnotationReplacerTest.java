package com.bergerkiller.mountiplex;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;

import com.bergerkiller.mountiplex.reflection.util.asm.AnnotationRemapTask;
import com.bergerkiller.mountiplex.reflection.util.asm.SourceFileProcessor;
import org.junit.Test;

import com.bergerkiller.mountiplex.reflection.declarations.Template;
import com.bergerkiller.mountiplex.reflection.util.GeneratorClassLoader;
import com.bergerkiller.mountiplex.reflection.util.asm.AnnotationReplacer;
import com.bergerkiller.mountiplex.reflection.util.asm.ClassBytecodeLoader;
import com.bergerkiller.mountiplex.types.AnnotationTestClass;

public class AnnotationReplacerTest {
    private final SourceFileProcessor sourceFileProcessor = new SourceFileProcessor();

    @Template.Generated("<CLASS_BODY>")
    public static abstract class TestClass {
        @Template.Generated("<FIELD_BODY>")
        public int field;

        @Template.Generated("<METHOD_BODY>")
        public abstract void test();
    }

    @Test
    public void testAnnotationReplacer() throws Throwable {
        // Read original class bytecode
        byte[] originalBytecode;
        {
            InputStream input = ClassBytecodeLoader.getResourceAsStream(TestClass.class);
            assertNotNull(input);

            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            int nRead;
            byte[] data = new byte[4096];
            while ((nRead = input.read(data, 0, data.length)) != -1) {
                buffer.write(data, 0, nRead);
            }
            originalBytecode = buffer.toByteArray();
        }

        String new_name = TestClass.class.getName();// + "$repl";

        // Transform
        byte[] generatedBytecode = AnnotationReplacer.replace(originalBytecode, (annotationName, annotationValue) -> {
            return annotationName + "<REPLACED>" + annotationValue;
        });

        // Generate a class using this generated bytecode
        Class<?> defined = GeneratorClassLoader.get(TestClass.class.getClassLoader()).createClassFromBytecode(new_name, generatedBytecode, null);

        // Verify the defined class has the annotation replaced
        {
            Template.Generated generated = defined.getAnnotation(Template.Generated.class);
            assertNotNull(generated);
            if (!generated.value().equals("com.bergerkiller.mountiplex.reflection.declarations.Template$Generated<REPLACED><CLASS_BODY>")) {
                System.err.println("INVALID: " + generated.value());
                fail("Invalid annotation value");
            }
        }

        // Verify the defined class method has the annotation replaced
        {
            Method testMethod = defined.getDeclaredMethod("test");
            Template.Generated generated = testMethod.getAnnotation(Template.Generated.class);
            assertNotNull(generated);
            if (!generated.value().equals("com.bergerkiller.mountiplex.reflection.declarations.Template$Generated<REPLACED><METHOD_BODY>")) {
                System.err.println("INVALID: " + generated.value());
                fail("Invalid annotation value");
            }
        }

        // Verify the defined class field has the annotation replaced
        {
            Field testField = defined.getDeclaredField("field");
            Template.Generated generated = testField.getAnnotation(Template.Generated.class);
            assertNotNull(generated);
            if (!generated.value().equals("com.bergerkiller.mountiplex.reflection.declarations.Template$Generated<REPLACED><FIELD_BODY>")) {
                System.err.println("INVALID: " + generated.value());
                fail("Invalid annotation value");
            }
        }
    }

    @Test
    public void testAnnotationsMojoVariableParsing() throws IOException {
        File inputFile = new File("src/test/java/com/bergerkiller/mountiplex/types/AnnotationTestClass.java");
        Map<String, String> variables = sourceFileProcessor.process(inputFile);

        // All 7 should be loaded
        assertEquals(7, variables.size());

        // Check the requirements in the class body are resolved
        assertEquals("com.bergerkiller.mountiplex.types.AnnotationTestClass public static String generatedBody() {\n" +
                     "    // This is a comment\n" +
                     "    return \"generated123\";\n" +
                     "}", variables.get("TEST_REQUIREMENT_A"));
        assertEquals("public static String testMethod();", variables.get("TEST_REQUIREMENT_B"));

        // All last 4 methods should have the same expected body
        for (int n = 1; n <= 4; n++) {
            assertEquals("public void test() {\n" +
                         "    System.out.println(\"Hello, world!\");\n" +
                         "\n" +
                         "    // Comment\n" +
                         "\n" +
                         "    // Spaces\n" +
                         "}", variables.get("TEST_REPLACEMENT" + n));
        }
    }

    private static boolean is_remapped = false;
    private void remapAnnotationTestClass() {
        if (is_remapped) {
            return;
        }
        File classFile = new File("build/classes/java/test/com/bergerkiller/mountiplex/types/AnnotationTestClass.class");
        File inputFile = new File("src/test/java/com/bergerkiller/mountiplex/types/AnnotationTestClass.java");
        Map<String, String> variables;
        try {
            variables = sourceFileProcessor.process(inputFile);
        } catch (IOException e) {
            throw new RuntimeException("Failed to load source file", e);
        }
        new AnnotationRemapTask(classFile, classFile, variables).remap();
        is_remapped = true;
    }

    @Test
    public void testAnnotationsMojoRemapping() {
        // Normally runs in a mojo, but do it manually here
        remapAnnotationTestClass();

        // Actually load the class itself and confirm that the generated annotations are all correct

        // Require annotations of class
        {
            Template.Require[] requires = AnnotationTestClass.class.getAnnotationsByType(Template.Require.class);
            assertEquals(3, requires.length);

            assertEquals("", requires[0].declaring());
            assertEquals("com.bergerkiller.mountiplex.types.AnnotationTestClass public static String generatedBody() {\n" +
                         "    // This is a comment\n" +
                         "    return \"generated123\";\n" +
                         "}", requires[0].value());

            assertEquals("com.bergerkiller.mountiplex.types.AnnotationTestClass", requires[1].declaring());
            assertEquals("public static String testMethod();", requires[1].value());

            assertEquals("com.bergerkiller.mountiplex.types.AnnotationTestClass", requires[2].declaring());
            assertEquals("public static int testFieldAlias:testFieldUsedInRequirement;", requires[2].value());
        }

        // Generated annotations of methods of class
        {
            Template.Generated[] generated = Stream.of(AnnotationTestClass.class.getDeclaredMethods())
                    .sorted((m1, m2) -> m1.getName().compareTo(m2.getName()))
                    .map(m -> m.getAnnotation(Template.Generated.class))
                    .filter(Objects::nonNull)
                    .toArray(Template.Generated[]::new);
            assertEquals(5, generated.length);

            // All last 4 methods should have the same expected body
            for (int n = 1; n <= 4; n++) {
                assertEquals("public void test() {\n" +
                             "    System.out.println(\"Hello, world!\");\n" +
                             "\n" +
                             "    // Comment\n" +
                             "\n" +
                             "    // Spaces\n" +
                             "}", generated[n-1].value());
            }
        }
    }

    @Test
    public void testAnnotationBasedTemplateClass() {
        // Normally runs in a mojo, but do it manually here
        remapAnnotationTestClass();

        // Instantiate the test class
        AnnotationTestClass testClass = Template.Class.create(AnnotationTestClass.class);
        testClass.forceInitialization();
        assertEquals("generated123/hello123/200", testClass.testRequirements());
    }
}
