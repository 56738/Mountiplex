package com.bergerkiller.mountiplex;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.Test;

import com.bergerkiller.mountiplex.mojo.MountiplexCreateGenerateAnnotationsMojo.ProcessedSourceFile;
import com.bergerkiller.mountiplex.reflection.declarations.Template;
import com.bergerkiller.mountiplex.reflection.util.GeneratorClassLoader;
import com.bergerkiller.mountiplex.reflection.util.asm.AnnotationReplacer;
import com.bergerkiller.mountiplex.reflection.util.asm.ClassBytecodeLoader;

public class AnnotationReplacerTest {

    @Template.Generated("<CLASS_BODY>")
    public static abstract class TestClass {
        @Template.Generated("<FIELD_BODY>")
        public int field;

        @Template.Generated("<METHOD_BODY>")
        public abstract void test();
    }

    @Test
    public void testAnnotationReplacer() throws Throwable {
        // Read original class bytecode
        byte[] originalBytecode;
        {
            InputStream input = ClassBytecodeLoader.getResourceAsStream(TestClass.class);
            assertNotNull(input);

            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            int nRead;
            byte[] data = new byte[4096];
            while ((nRead = input.read(data, 0, data.length)) != -1) {
                buffer.write(data, 0, nRead);
            }
            originalBytecode = buffer.toByteArray();
        }

        String new_name = TestClass.class.getName();// + "$repl";

        // Transform
        byte[] generatedBytecode = AnnotationReplacer.replace(originalBytecode, (annotationName, annotationValue) -> {
            return annotationName + "<REPLACED>" + annotationValue;
        });

        // Generate a class using this generated bytecode
        Class<?> defined = GeneratorClassLoader.get(TestClass.class.getClassLoader()).createClassFromBytecode(new_name, generatedBytecode);

        // Verify the defined class has the annotation replaced
        {
            Template.Generated generated = defined.getAnnotation(Template.Generated.class);
            assertNotNull(generated);
            if (!generated.value().equals("com.bergerkiller.mountiplex.reflection.declarations.Template$Generated<REPLACED><CLASS_BODY>")) {
                System.err.println("INVALID: " + generated.value());
                fail("Invalid annotation value");
            }
        }

        // Verify the defined class method has the annotation replaced
        {
            Method testMethod = defined.getDeclaredMethod("test");
            Template.Generated generated = testMethod.getAnnotation(Template.Generated.class);
            assertNotNull(generated);
            if (!generated.value().equals("com.bergerkiller.mountiplex.reflection.declarations.Template$Generated<REPLACED><METHOD_BODY>")) {
                System.err.println("INVALID: " + generated.value());
                fail("Invalid annotation value");
            }
        }

        // Verify the defined class field has the annotation replaced
        {
            Field testField = defined.getDeclaredField("field");
            Template.Generated generated = testField.getAnnotation(Template.Generated.class);
            assertNotNull(generated);
            if (!generated.value().equals("com.bergerkiller.mountiplex.reflection.declarations.Template$Generated<REPLACED><FIELD_BODY>")) {
                System.err.println("INVALID: " + generated.value());
                fail("Invalid annotation value");
            }
        }
    }

    @Test
    public void testDetectAnnotationsMojo() throws IOException {
        File inputFile = new File("src/test/java/com/bergerkiller/mountiplex/types/AnnotationTestClass.java");
        ProcessedSourceFile sourceFile = new ProcessedSourceFile(inputFile, inputFile.lastModified());
        assertNotEquals(0, sourceFile.lastModified);
        sourceFile.load(inputFile);

        // All 4 should be loaded
        assertEquals(4, sourceFile.variables.size());

        // All 4 should have the same expected body
        for (int n = 1; n <= sourceFile.variables.size(); n++) {
            assertEquals("public void test() {\n" + 
                         "    System.out.println(\"Hello, world!\");\n" + 
                         "\n" + 
                         "    // Comment\n" + 
                         "\n" + 
                         "    // Spaces\n" + 
                         "}", sourceFile.variables.get("TEST_REPLACEMENT" + n));
        }
    }
}
